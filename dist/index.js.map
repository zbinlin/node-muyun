{"version":3,"file":null,"sources":["../index.js"],"sourcesContent":["\"use strict\";\n\nimport * as crypto from \"crypto\";\nimport * as util from \"util\";\n\nconst ALG_C = \"aes192\";\n\n\n/**\n * @param {Stream} stream\n * @return {Function<Promise<Buffer, Error>>}\n */\nfunction wrapStream(stream) {\n    return buffer => {\n        return new Promise((resolve, reject) => {\n            const buffers = [];\n            buffers.size = 0;\n            stream.on(\"data\", data => {\n                buffers.push(data);\n                buffers.size += data.length;\n            });\n            stream.on(\"end\", () => {\n                resolve(Buffer.concat(buffers, buffers.size));\n            });\n            stream.on(\"error\", reject);\n            stream.end(buffer);\n        });\n    };\n}\n\n/**\n * @param {string|Buffer} phrase\n * @param {string} salt\n * @param {string}\n */\nasync function createPasswordBy(phrase, salt) {\n    const hmac = crypto.createHmac(\"sha256\", phrase);\n    const pw = await wrapStream(hmac)(Buffer.from(String(salt), \"utf8\"));\n    return pw.toString(\"hex\");\n}\n\n\n/**\n * @param {number}\n * @param {Date|number} [timestamp=Date.now()]\n * @return {Object}\n * @property {number} interval\n * @property {number} base\n * @property {number} offset\n */\nexport function getTimeOffsetBy(interval, timestamp = Date.now()) {\n    if (timestamp instanceof Date) {\n        timestamp = Math.floor(timestamp.getTime() / 1000);\n    }\n    return timestamp % interval;\n}\n\n/**\n * @param {number} timestamp\n * @param {number} interval\n * @param {number} offset\n * @return {number}\n */\nexport function getSameValueFromTimeInterval(timestamp, interval, offset) {\n    if (timestamp instanceof Date) {\n        timestamp = Math.floor(timestamp.getTime() / 1000);\n    }\n    return Math.floor((timestamp - offset) / interval) * (interval - offset);\n}\nexport const calcPasswordFrom = util.deprecate(getSameValueFromTimeInterval, \"calcPasswordFrom was deprecated, please use getSameValueFromTimeInterval instaead.\");\n\n/**\n * @param {string} str\n * @param {string|Buffer} phrase\n * @param {string} salt\n * @return {Buffer}\n */\nexport async function encrypt(str, phrase, salt) {\n    const password = await createPasswordBy(phrase, salt);\n    const cipher = crypto.createCipher(ALG_C, password);\n    return await wrapStream(cipher)(Buffer.from(str, \"utf8\"));\n}\n\n/**\n * @param {Buffer} buffer\n * @param {string|Buffer} phrase\n * @param {string} salt\n * @return {string}\n */\nexport async function decrypt(buffer, phrase, salt) {\n    const password = await createPasswordBy(phrase, salt);\n    const decipher = crypto.createDecipher(ALG_C, password);\n    const newBuffer = await wrapStream(decipher)(buffer);\n    return newBuffer.toString(\"utf8\");\n}\n"],"names":["phrase","salt","crypto","wrapStream","hmac","Buffer","from","String","pw","toString","createPasswordBy","ALG_C","stream","Promise","resolve","reject","buffers","size","on","push","data","length","concat","end","buffer","getTimeOffsetBy","interval","timestamp","Date","now","Math","floor","getTime","getSameValueFromTimeInterval","offset","calcPasswordFrom","util","str","password","cipher","encrypt","decipher","newBuffer","decrypt"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA;;;;;;yDAKA,iBAAgCA,MAAhC,EAAwCC,IAAxC;;;;;;4BAAA,GACiBC,iBAAA,CAAkB,QAAlB,EAA4BF,MAA5B,CADjB;;+BAEqBG,WAAWC,IAAX,EAAiBC,OAAOC,IAAP,CAAYC,OAAON,IAAP,CAAZ,EAA0B,MAA1B,CAAjB,CAFrB;;;0BAAA;yDAGWO,GAAGC,QAAH,CAAY,KAAZ,CAHX;;;;;;;;;;oBAAeC;;;;;;;;;;;;;;;AAjCf,AACA,AAEA,IAAMC,QAAQ,QAAd;;;;;;AAOA,SAASR,UAAT,CAAoBS,MAApB,EAA4B;WACjB,kBAAU;eACN,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;gBAC9BC,UAAU,EAAhB;oBACQC,IAAR,GAAe,CAAf;mBACOC,EAAP,CAAU,MAAV,EAAkB,gBAAQ;wBACdC,IAAR,CAAaC,IAAb;wBACQH,IAAR,IAAgBG,KAAKC,MAArB;aAFJ;mBAIOH,EAAP,CAAU,KAAV,EAAiB,YAAM;wBACXb,OAAOiB,MAAP,CAAcN,OAAd,EAAuBA,QAAQC,IAA/B,CAAR;aADJ;mBAGOC,EAAP,CAAU,OAAV,EAAmBH,MAAnB;mBACOQ,GAAP,CAAWC,MAAX;SAXG,CAAP;KADJ;CAqCJ,AAAO,SAASC,eAAT,CAAyBC,QAAzB,EAA2D;QAAxBC,SAAwB,uEAAZC,KAAKC,GAAL,EAAY;;QAC1DF,qBAAqBC,IAAzB,EAA+B;oBACfE,KAAKC,KAAL,CAAWJ,UAAUK,OAAV,KAAsB,IAAjC,CAAZ;;WAEGL,YAAYD,QAAnB;;;;;;;;;AASJ,AAAO,SAASO,4BAAT,CAAsCN,SAAtC,EAAiDD,QAAjD,EAA2DQ,MAA3D,EAAmE;QAClEP,qBAAqBC,IAAzB,EAA+B;oBACfE,KAAKC,KAAL,CAAWJ,UAAUK,OAAV,KAAsB,IAAjC,CAAZ;;WAEGF,KAAKC,KAAL,CAAW,CAACJ,YAAYO,MAAb,IAAuBR,QAAlC,KAA+CA,WAAWQ,MAA1D,CAAP;;AAEJ,AAAO,IAAMC,mBAAmBC,cAAA,CAAeH,4BAAf,EAA6C,oFAA7C,CAAzB;;;;;;;;AAQP;0DAAO,kBAAuBI,GAAvB,EAA4BrC,MAA5B,EAAoCC,IAApC;;;;;;;+BACoBS,iBAAiBV,MAAjB,EAAyBC,IAAzB,CADpB;;;gCAAA;8BAAA,GAEYC,mBAAA,CAAoBS,KAApB,EAA2B2B,QAA3B,CAFZ;;+BAGUnC,WAAWoC,MAAX,EAAmBlC,OAAOC,IAAP,CAAY+B,GAAZ,EAAiB,MAAjB,CAAnB,CAHV;;;;;;;;;;;KAAP;;oBAAsBG,OAAtB;;;;;;;;;;;AAYA;0DAAO,kBAAuBhB,MAAvB,EAA+BxB,MAA/B,EAAuCC,IAAvC;;;;;;;+BACoBS,iBAAiBV,MAAjB,EAAyBC,IAAzB,CADpB;;;gCAAA;gCAAA,GAEcC,qBAAA,CAAsBS,KAAtB,EAA6B2B,QAA7B,CAFd;;+BAGqBnC,WAAWsC,QAAX,EAAqBjB,MAArB,CAHrB;;;iCAAA;0DAIIkB,UAAUjC,QAAV,CAAmB,MAAnB,CAJJ;;;;;;;;KAAP;;oBAAsBkC,OAAtB;;;;;;;;;"}